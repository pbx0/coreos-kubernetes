#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_endpoints: {{ .ETCDEndpoints }}
  units:
    - name: docker.service
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            ExecStart=
            ExecStart=/usr/lib/coreos/dockerd daemon --host=fd:// $DOCKER_OPTS $DOCKER_CGROUPS $DOCKER_OPT_MTU

    - name: kubelet.service
      enable: true
      command: start
      content: |
{{ if eq .ContainerRuntime "rkt" }}
        [Unit]
        Requires=docker.service load-rkt-stage1.service
        After=docker.service load-rkt-stage1.service
{{ end }}
        [Service]
        Environment=KUBELET_VERSION={{.K8sVer}}
        Environment=KUBELET_ACI={{.HyperkubeImageRepo}}
        Environment="RKT_OPTS=--volume dns,kind=host,source=/etc/resolv.conf \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=mp,kind=host,source=/usr/sbin/modprobe \
        --mount volume=mp,target=/usr/bin/modprobe \
        --volume=rkthack,kind=host,source=/etc/rkthack \
        --mount volume=rkthack,target=/opt/rkt/rkt \
        --volume=stage,kind=host,source=/tmp \
        --mount volume=stage,target=/tmp"
        ExecStart=/etc/kubelet-wrapper \
        --api-servers={{.SecureAPIServers}} \
        --network-plugin-dir=/etc/kubernetes/cni/net.d \
        --network-plugin={{.K8sNetworkPlugin}} \
        --container-runtime={{.ContainerRuntime}} \
        --rkt-path=/opt/rkt/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --register-node=true \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --cluster_dns={{.DNSServiceIP}} \
        --cluster_domain=cluster.local \
        --cloud-provider=aws \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

{{ if eq .ContainerRuntime "rkt" }}
    - name: rkt-api.service
      enable: true
      command: start
      content: |
        [Unit]
        Requires=install-rkt.service
        After=install-rkt.service
        [Service]
        ExecStart=/opt/rkt/rkt api-service
        Restart=always
        RestartSec=10

    - name: load-rkt-stage1.service
      command: start
      content: |
        [Unit]
        Description=Load rkt stage1 images
        Documentation=http://github.com/coreos/rkt
        Requires=network-online.target
        After=network-online.target
        Requires=install-rkt.service
        After=install-rkt.service
        [Service]
        Type=oneshot
        ExecStart=/opt/rkt/rkt fetch /opt/rkt/stage1-coreos.aci /opt/rkt/stage1-kvm.aci /opt/rkt/stage1-fly.aci  --insecure-options=image

    - name: install-rkt.service
      command: start
      content: |
        [Unit]
        Description=Fetch rkt
        Documentation=http://github.com/coreos/rkt
        Requires=network-online.target
        After=network-online.target
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/mkdir -p /etc/rkt /opt/downloads /opt/rkt/
        ExecStartPre=/usr/bin/curl --fail --silent --location --create-dirs --output /opt/downloads/rkt.tar.gz https://github.com/coreos/rkt/releases/download/v1.12.0/rkt-v1.12.0.tar.gz
        ExecStart=/usr/bin/tar --strip-components=1 -xf /opt/downloads/rkt.tar.gz -C /opt/rkt/ --overwrite

    - name: flanneld.service
      command: start
      content: |
        [Unit]
        Description=Network fabric for containers
        Documentation=https://github.com/coreos/flannel
        After=etcd.service etcd2.service
        Before=docker.service
        Requires=install-rkt.service
        After=install-rkt.service
        
        [Service]
        Type=notify
        Restart=always
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="FLANNEL_VER=0.5.5"
        Environment="FLANNEL_IMG=quay.io/coreos/flannel"
        Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
        EnvironmentFile=-/run/flannel/options.env
        LimitNOFILE=40000
        LimitNPROC=1048576
        ExecStartPre=/sbin/modprobe ip_tables
        ExecStartPre=/usr/bin/mkdir -p /run/flannel
        ExecStartPre=/usr/bin/mkdir -p ${ETCD_SSL_DIR}
        
        ExecStart=/opt/rkt/rkt run --net=host \
           --stage1-path=/opt/rkt/stage1-fly.aci \
           --insecure-options=image \
           --set-env=NOTIFY_SOCKET=/run/systemd/notify \
           --inherit-env=true \
           --volume runsystemd,kind=host,source=/run/systemd,readOnly=false \
           --volume runflannel,kind=host,source=/run/flannel,readOnly=false \
           --volume ssl,kind=host,source=${ETCD_SSL_DIR},readOnly=true \
           --volume certs,kind=host,source=/usr/share/ca-certificates,readOnly=true \
           --volume resolv,kind=host,source=/etc/resolv.conf,readOnly=true \
           --mount volume=runsystemd,target=/run/systemd \
           --mount volume=runflannel,target=/run/flannel \
           --mount volume=ssl,target=${ETCD_SSL_DIR} \
           --mount volume=certs,target=/etc/ssl/certs \
           --mount volume=resolv,target=/etc/resolv.conf \
           ${FLANNEL_IMG}:${FLANNEL_VER} \
           --exec /opt/bin/flanneld \
           -- --ip-masq=true
        
        # Update docker options
        ExecStartPost=/opt/rkt/rkt run --net=host \
           --stage1-path=/opt/rkt/stage1-fly.aci \
           --insecure-options=image \
           --volume runvol,kind=host,source=/run,readOnly=false \
           --mount volume=runvol,target=/run \
           ${FLANNEL_IMG}:${FLANNEL_VER} \
           --exec /opt/bin/mk-docker-opts.sh -- -d /run/flannel_docker_opts.env -i
        
        ExecStopPost=/opt/rkt/rkt gc --mark-only
        
        [Install]
        WantedBy=multi-user.target
{{ end }}
{{ if .UseCalico }}
    - name: calico-node.service
      command: start
      content: |
        [Unit]
        Description=Calico per-host agent
        Requires=network-online.target
        After=network-online.target

        [Service]
        Slice=machine.slice
        Environment=CALICO_DISABLE_FILE_LOGGING=true
        Environment=HOSTNAME=$private_ipv4
        Environment=IP=$private_ipv4
        Environment=FELIX_FELIXHOSTNAME=$private_ipv4
        Environment=CALICO_NETWORKING=false
        Environment=NO_DEFAULT_POOLS=true
        Environment=ETCD_ENDPOINTS={{ .ETCDEndpoints }}
        ExecStart=/usr/bin/rkt run --inherit-env --stage1-from-dir=stage1-fly.aci \
        --volume=modules,kind=host,source=/lib/modules,readOnly=false \
        --mount=volume=modules,target=/lib/modules \
        --trust-keys-from-https quay.io/calico/node:v0.19.0
        KillMode=mixed
        Restart=always
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
{{ end }}

    - name: decrypt-tls-assets.service
      enable: true
      content: |
        [Unit]
        Description=decrypt kubelet tls assets using amazon kms
        Before=kubelet.service
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/decrypt-tls-assets

        [Install]
        RequiredBy=kubelet.service

write_files:
  - path: /etc/rkthack
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /opt/rkt/rkt $@
  - path: /etc/kubelet-wrapper
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash
      
      set -e
      
      if [ -z "${KUBELET_VERSION}" ]; then
          echo "ERROR: must set KUBELET_VERSION"
          exit 1
      fi
      
      KUBELET_ACI="${KUBELET_ACI:-quay.io/coreos/hyperkube}"
      
      mkdir --parents /etc/kubernetes
      mkdir --parents /var/lib/docker
      mkdir --parents /var/lib/kubelet
      mkdir --parents /run/kubelet
      
      exec /opt/rkt/rkt run \
        --volume etc-kubernetes,kind=host,source=/etc/kubernetes \
        --volume etc-ssl-certs,kind=host,source=/usr/share/ca-certificates \
        --volume var-lib-docker,kind=host,source=/var/lib/docker \
        --volume var-lib-kubelet,kind=host,source=/var/lib/kubelet \
        --volume os-release,kind=host,source=/usr/lib/os-release \
        --volume run,kind=host,source=/run \
        --mount volume=etc-kubernetes,target=/etc/kubernetes \
        --mount volume=etc-ssl-certs,target=/etc/ssl/certs \
        --mount volume=var-lib-docker,target=/var/lib/docker \
        --mount volume=var-lib-kubelet,target=/var/lib/kubelet \
        --mount volume=os-release,target=/etc/os-release \
        --mount volume=run,target=/run \
        --trust-keys-from-https \
        $RKT_OPTS \
        --stage1-name=coreos.com/rkt/stage1-fly \
        ${KUBELET_ACI}:${KUBELET_VERSION} --exec=/kubelet -- "$@"

  - path: /etc/kubernetes/ssl/worker.pem.enc
    encoding: gzip+base64
    content: {{.TLSConfig.WorkerCert}}

  - path: /etc/kubernetes/ssl/worker-key.pem.enc
    encoding: gzip+base64
    content: {{.TLSConfig.WorkerKey}}

  - path: /etc/kubernetes/ssl/ca.pem.enc
    encoding: gzip+base64
    content: {{.TLSConfig.CACert}}

  - path: /opt/bin/decrypt-tls-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      for encKey in $(find /etc/kubernetes/ssl/*.pem.enc);do
        tmpPath="/tmp/$(basename $encKey).tmp"
        docker run --rm -v /etc/kubernetes/ssl:/etc/kubernetes/ssl --rm quay.io/coreos/awscli aws --region {{.Region}} kms decrypt --ciphertext-blob fileb://$encKey --output text --query Plaintext | base64 --decode > $tmpPath
        mv  $tmpPath /etc/kubernetes/ssl/$(basename $encKey .enc)
      done

  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: {{.HyperkubeImageRepo}}:{{.K8sVer}}
            command:
            - /hyperkube
            - proxy
            - --master=https://{{.ControllerIP}}:443
            - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: "ssl-certs"
              - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
                name: "kubeconfig"
                readOnly: true
              - mountPath: /etc/kubernetes/ssl
                name: "etc-kube-ssl"
                readOnly: true
              - mountPath: /var/run/dbus
                name: dbus
                readOnly: false
          volumes:
            - name: "ssl-certs"
              hostPath:
                path: "/usr/share/ca-certificates"
            - name: "kubeconfig"
              hostPath:
                path: "/etc/kubernetes/worker-kubeconfig.yaml"
            - name: "etc-kube-ssl"
              hostPath:
                path: "/etc/kubernetes/ssl"
            - hostPath:
                path: /var/run/dbus
              name: dbus

  - path: /etc/kubernetes/worker-kubeconfig.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context

{{ if .UseCalico }}
  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
        {
            "name": "calico",
            "type": "flannel",
            "delegate": {
                "type": "calico",
                "etcd_endpoints": "{{ .ETCDEndpoints }}",
                "log_level": "none",
                "log_level_stderr": "info",
                "hostname": "$private_ipv4",
                "policy": {
                    "type": "k8s",
                    "k8s_api_root": "https://{{.ControllerIP}}:443/api/v1/",
                    "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
                    "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem"
                }
            }
        }
{{ else }}
  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    content: |
        {
            "name": "podnet",
            "type": "flannel",
            "delegate": {
                "isDefaultGateway": true
            }
        }
{{ end }}
